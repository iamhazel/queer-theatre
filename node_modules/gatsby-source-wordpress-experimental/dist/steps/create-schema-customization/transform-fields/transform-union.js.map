{"version":3,"sources":["../../../../src/steps/create-schema-customization/transform-fields/transform-union.js"],"names":["transformUnion","field","fieldName","type","name","resolve","source","_","context","resolvedField","id","gatsbyNode","nodeModel","getNodeById","transformListOfUnions","typeName","ofType","length","map","item","node","__typename"],"mappings":";;;;;AAAA;;AAEO,MAAMA,cAAc,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA0B;AACtD,SAAO;AACLC,IAAAA,IAAI,EAAE,4BAAcF,KAAK,CAACE,IAAN,CAAWC,IAAzB,CADD;AAELC,IAAAA,OAAO,EAAE,CAACC,MAAD,EAASC,CAAT,EAAYC,OAAZ,KAAwB;AAC/B,YAAMC,aAAa,GACjBH,MAAM,CAACJ,SAAD,CAAN,IACAI,MAAM,CAAE,GAAEL,KAAK,CAACG,IAAK,cAAaH,KAAK,CAACE,IAAN,CAAWC,IAAK,EAA5C,CAFR;;AAIA,UAAIK,aAAa,IAAIA,aAAa,CAACC,EAAnC,EAAuC;AACrC,cAAMC,UAAU,GAAGH,OAAO,CAACI,SAAR,CAAkBC,WAAlB,CAA8B;AAC/CH,UAAAA,EAAE,EAAED,aAAa,CAACC,EAD6B;AAE/CP,UAAAA,IAAI,EAAEM,aAAa,CAACN;AAF2B,SAA9B,CAAnB;;AAKA,YAAIQ,UAAJ,EAAgB;AACd,iBAAOA,UAAP;AACD;AACF;;AAED,aAAOF,aAAP;AACD;AAnBI,GAAP;AAqBD,CAtBM;;;;AAwBA,MAAMK,qBAAqB,GAAG,CAAC;AAAEb,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA0B;AAC7D,QAAMa,QAAQ,GAAG,4BAAcd,KAAK,CAACE,IAAN,CAAWa,MAAX,CAAkBZ,IAAhC,CAAjB;AAEA,SAAO;AACLD,IAAAA,IAAI,EAAG,IAAGY,QAAS,GADd;AAELV,IAAAA,OAAO,EAAE,CAACC,MAAD,EAASC,CAAT,EAAYC,OAAZ,KAAwB;AAAA;;AAC/B,YAAMC,aAAa,wBACjBH,MAAM,CAACJ,SAAD,CADW,iEAEjBI,MAAM,CAAE,GAAEL,KAAK,CAACG,IAAK,cAAaH,KAAK,CAACE,IAAN,CAAWC,IAAK,EAA5C,CAFR;;AAIA,UACG,CAACK,aAAD,IAAkBA,aAAa,KAAK,KAArC,IACA,CAACA,aAAa,CAACQ,MAFjB,EAGE;AACA,eAAO,IAAP;AACD;;AAED,aAAOR,aAAa,CAACS,GAAd,CAAmBC,IAAD,IAAU;AACjC;AACA;AACA,cAAMC,IAAI,GAAGZ,OAAO,CAACI,SAAR,CAAkBC,WAAlB,CAA8B;AACzCH,UAAAA,EAAE,EAAES,IAAI,CAACT,EADgC;AAEzCP,UAAAA,IAAI,EAAE,4BAAcgB,IAAI,CAACE,UAAnB;AAFmC,SAA9B,CAAb;;AAKA,YAAID,IAAJ,EAAU;AACR,iBAAOA,IAAP;AACD;;AAED,eAAOD,IAAP;AACD,OAbM,CAAP;AAcD;AA5BI,GAAP;AA8BD,CAjCM","sourcesContent":["import { buildTypeName } from \"~/steps/create-schema-customization/helpers\"\n\nexport const transformUnion = ({ field, fieldName }) => {\n  return {\n    type: buildTypeName(field.type.name),\n    resolve: (source, _, context) => {\n      const resolvedField =\n        source[fieldName] ||\n        source[`${field.name}__typename_${field.type.name}`]\n\n      if (resolvedField && resolvedField.id) {\n        const gatsbyNode = context.nodeModel.getNodeById({\n          id: resolvedField.id,\n          type: resolvedField.type,\n        })\n\n        if (gatsbyNode) {\n          return gatsbyNode\n        }\n      }\n\n      return resolvedField\n    },\n  }\n}\n\nexport const transformListOfUnions = ({ field, fieldName }) => {\n  const typeName = buildTypeName(field.type.ofType.name)\n\n  return {\n    type: `[${typeName}]`,\n    resolve: (source, _, context) => {\n      const resolvedField =\n        source[fieldName] ??\n        source[`${field.name}__typename_${field.type.name}`]\n\n      if (\n        (!resolvedField && resolvedField !== false) ||\n        !resolvedField.length\n      ) {\n        return null\n      }\n\n      return resolvedField.map((item) => {\n        // @todo use our list of Gatsby node types to do a more performant check\n        // on wether this is a Gatsby node or not.\n        const node = context.nodeModel.getNodeById({\n          id: item.id,\n          type: buildTypeName(item.__typename),\n        })\n\n        if (node) {\n          return node\n        }\n\n        return item\n      })\n    },\n  }\n}\n"],"file":"transform-union.js"}