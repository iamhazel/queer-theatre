{"version":3,"sources":["../../../../src/steps/source-nodes/fetch-nodes/fetch-nodes-paginated.js"],"names":["normalizeNode","node","nodeTypeName","normalizedNodeTypeName","__typename","type","nodeType","paginatedWpNodeFetch","contentTypePlural","query","helpers","throwFetchErrors","throwGqlErrors","allContentNodes","after","settings","variables","limit","length","first","errorContext","response","data","nodes","pageInfo","hasNextPage","endCursor","filter","Boolean","forEach","push","store","dispatch","logger","incrementActivityTimer","typeName","by"],"mappings":"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","sourcesContent":["import fetchGraphql from \"~/utils/fetch-graphql\"\nimport store from \"~/store\"\n\nexport const normalizeNode = ({ node, nodeTypeName }) => {\n  const normalizedNodeTypeName = node.__typename || nodeTypeName\n  // @todo is node.type used anywhere??\n  node.type = normalizedNodeTypeName\n  // this is used to filter node interfaces by content types\n  node.nodeType = normalizedNodeTypeName\n\n  return node\n}\n\n/**\n * paginatedWpNodeFetch\n *\n * recursively fetches/paginates remote nodes\n */\nconst paginatedWpNodeFetch = async ({\n  contentTypePlural,\n  query,\n  nodeTypeName,\n  helpers,\n  throwFetchErrors = false,\n  throwGqlErrors = false,\n  allContentNodes = [],\n  after = null,\n  settings = {},\n  ...variables\n}) => {\n  if (\n    !settings.limit &&\n    typeof settings.limit === `number` &&\n    settings.limit === 0\n  ) {\n    // if the Type.limit plugin option is set to the number 0,\n    // we shouldn't fetch anything\n    return []\n  }\n\n  if (\n    settings.limit &&\n    // if we're about to fetch more than our limit\n    allContentNodes.length + variables.first > settings.limit\n  ) {\n    // just fetch whatever number is remaining\n    variables.first = settings.limit - allContentNodes.length\n  }\n\n  // if the GQL var \"first\" is greater than our Type.limit plugin option,\n  // that's no good\n  if (settings.limit && settings.limit < variables.first) {\n    // so just fetch our limit\n    variables.first = settings.limit\n  }\n\n  const errorContext = `Error occured while fetching nodes of the \"${nodeTypeName}\" type.`\n\n  const response = await fetchGraphql({\n    query,\n    throwFetchErrors,\n    throwGqlErrors,\n    variables: {\n      ...variables,\n      after,\n    },\n    errorContext,\n  })\n\n  const { data } = response\n\n  if (!data?.[contentTypePlural]?.nodes) {\n    return allContentNodes\n  }\n\n  let {\n    [contentTypePlural]: { nodes, pageInfo: { hasNextPage, endCursor } = {} },\n  } = data\n\n  // Sometimes private posts return as null.\n  // That causes problems for us so let's strip them out\n  nodes = nodes.filter(Boolean)\n\n  if (nodes && nodes.length) {\n    nodes.forEach((node) => {\n      node = normalizeNode({ node, nodeTypeName })\n      allContentNodes.push(node)\n    })\n\n    // MediaItem type is incremented in createMediaItemNode\n    if (nodeTypeName !== `MediaItem`) {\n      store.dispatch.logger.incrementActivityTimer({\n        typeName: nodeTypeName,\n        by: nodes.length,\n      })\n    }\n  }\n\n  if (\n    hasNextPage &&\n    endCursor &&\n    (!settings.limit || settings.limit > allContentNodes.length)\n  ) {\n    return paginatedWpNodeFetch({\n      ...variables,\n      contentTypePlural,\n      nodeTypeName,\n      query,\n      allContentNodes,\n      helpers,\n      settings,\n      after: endCursor,\n    })\n  } else {\n    return allContentNodes\n  }\n}\n\nexport { paginatedWpNodeFetch }\n"],"file":"fetch-nodes-paginated.js"}